// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Auth is an object representing the database table.
type Auth struct {
	ID                  uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PersonID            uint64      `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt          time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`
	PasswordDigest      string      `boil:"password_digest" json:"password_digest" toml:"password_digest" yaml:"password_digest"`
	YubikeyDigest       string      `boil:"yubikey_digest" json:"yubikey_digest" toml:"yubikey_digest" yaml:"yubikey_digest"`
	YubikeyBackupDigest string      `boil:"yubikey_backup_digest" json:"yubikey_backup_digest" toml:"yubikey_backup_digest" yaml:"yubikey_backup_digest"`
	Email               string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	EmailConfirmToken   string      `boil:"email_confirm_token" json:"email_confirm_token" toml:"email_confirm_token" yaml:"email_confirm_token"`
	EmailConfirmed      null.Bool   `boil:"email_confirmed" json:"email_confirmed,omitempty" toml:"email_confirmed" yaml:"email_confirmed,omitempty"`
	EmailConfirmTime    null.Time   `boil:"email_confirm_time" json:"email_confirm_time,omitempty" toml:"email_confirm_time" yaml:"email_confirm_time,omitempty"`
	LastIPAddress       string      `boil:"last_ip_address" json:"last_ip_address" toml:"last_ip_address" yaml:"last_ip_address"`
	LastLoginAt         null.Time   `boil:"last_login_at" json:"last_login_at,omitempty" toml:"last_login_at" yaml:"last_login_at,omitempty"`
	LastUserAgent       string      `boil:"last_user_agent" json:"last_user_agent" toml:"last_user_agent" yaml:"last_user_agent"`
	LoginCount          null.Uint   `boil:"login_count" json:"login_count,omitempty" toml:"login_count" yaml:"login_count,omitempty"`
	ResetForce          null.Bool   `boil:"reset_force" json:"reset_force,omitempty" toml:"reset_force" yaml:"reset_force,omitempty"`
	ResetPasswordTime   null.Time   `boil:"reset_password_time" json:"reset_password_time,omitempty" toml:"reset_password_time" yaml:"reset_password_time,omitempty"`
	ResetPasswordToken  string      `boil:"reset_password_token" json:"reset_password_token" toml:"reset_password_token" yaml:"reset_password_token"`
	ResetTokenExpiresAt null.Time   `boil:"reset_token_expires_at" json:"reset_token_expires_at,omitempty" toml:"reset_token_expires_at" yaml:"reset_token_expires_at,omitempty"`
	Locked              null.Bool   `boil:"locked" json:"locked,omitempty" toml:"locked" yaml:"locked,omitempty"`
	LockedTime          null.Time   `boil:"locked_time" json:"locked_time,omitempty" toml:"locked_time" yaml:"locked_time,omitempty"`
	LockedByUserID      null.Uint64 `boil:"locked_by_user_id" json:"locked_by_user_id,omitempty" toml:"locked_by_user_id" yaml:"locked_by_user_id,omitempty"`
	IsDeleted           null.Bool   `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`

	R *authR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthColumns = struct {
	ID                  string
	PersonID            string
	CreatedAt           string
	ModifiedAt          string
	PasswordDigest      string
	YubikeyDigest       string
	YubikeyBackupDigest string
	Email               string
	EmailConfirmToken   string
	EmailConfirmed      string
	EmailConfirmTime    string
	LastIPAddress       string
	LastLoginAt         string
	LastUserAgent       string
	LoginCount          string
	ResetForce          string
	ResetPasswordTime   string
	ResetPasswordToken  string
	ResetTokenExpiresAt string
	Locked              string
	LockedTime          string
	LockedByUserID      string
	IsDeleted           string
}{
	ID:                  "id",
	PersonID:            "person_id",
	CreatedAt:           "created_at",
	ModifiedAt:          "modified_at",
	PasswordDigest:      "password_digest",
	YubikeyDigest:       "yubikey_digest",
	YubikeyBackupDigest: "yubikey_backup_digest",
	Email:               "email",
	EmailConfirmToken:   "email_confirm_token",
	EmailConfirmed:      "email_confirmed",
	EmailConfirmTime:    "email_confirm_time",
	LastIPAddress:       "last_ip_address",
	LastLoginAt:         "last_login_at",
	LastUserAgent:       "last_user_agent",
	LoginCount:          "login_count",
	ResetForce:          "reset_force",
	ResetPasswordTime:   "reset_password_time",
	ResetPasswordToken:  "reset_password_token",
	ResetTokenExpiresAt: "reset_token_expires_at",
	Locked:              "locked",
	LockedTime:          "locked_time",
	LockedByUserID:      "locked_by_user_id",
	IsDeleted:           "is_deleted",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Uint struct{ field string }

func (w whereHelpernull_Uint) EQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint) NEQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint) LT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint) LTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint) GT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint) GTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Uint64 struct{ field string }

func (w whereHelpernull_Uint64) EQ(x null.Uint64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint64) NEQ(x null.Uint64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint64) LT(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint64) LTE(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint64) GT(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint64) GTE(x null.Uint64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuthWhere = struct {
	ID                  whereHelperuint64
	PersonID            whereHelperuint64
	CreatedAt           whereHelpertime_Time
	ModifiedAt          whereHelpertime_Time
	PasswordDigest      whereHelperstring
	YubikeyDigest       whereHelperstring
	YubikeyBackupDigest whereHelperstring
	Email               whereHelperstring
	EmailConfirmToken   whereHelperstring
	EmailConfirmed      whereHelpernull_Bool
	EmailConfirmTime    whereHelpernull_Time
	LastIPAddress       whereHelperstring
	LastLoginAt         whereHelpernull_Time
	LastUserAgent       whereHelperstring
	LoginCount          whereHelpernull_Uint
	ResetForce          whereHelpernull_Bool
	ResetPasswordTime   whereHelpernull_Time
	ResetPasswordToken  whereHelperstring
	ResetTokenExpiresAt whereHelpernull_Time
	Locked              whereHelpernull_Bool
	LockedTime          whereHelpernull_Time
	LockedByUserID      whereHelpernull_Uint64
	IsDeleted           whereHelpernull_Bool
}{
	ID:                  whereHelperuint64{field: "`auths`.`id`"},
	PersonID:            whereHelperuint64{field: "`auths`.`person_id`"},
	CreatedAt:           whereHelpertime_Time{field: "`auths`.`created_at`"},
	ModifiedAt:          whereHelpertime_Time{field: "`auths`.`modified_at`"},
	PasswordDigest:      whereHelperstring{field: "`auths`.`password_digest`"},
	YubikeyDigest:       whereHelperstring{field: "`auths`.`yubikey_digest`"},
	YubikeyBackupDigest: whereHelperstring{field: "`auths`.`yubikey_backup_digest`"},
	Email:               whereHelperstring{field: "`auths`.`email`"},
	EmailConfirmToken:   whereHelperstring{field: "`auths`.`email_confirm_token`"},
	EmailConfirmed:      whereHelpernull_Bool{field: "`auths`.`email_confirmed`"},
	EmailConfirmTime:    whereHelpernull_Time{field: "`auths`.`email_confirm_time`"},
	LastIPAddress:       whereHelperstring{field: "`auths`.`last_ip_address`"},
	LastLoginAt:         whereHelpernull_Time{field: "`auths`.`last_login_at`"},
	LastUserAgent:       whereHelperstring{field: "`auths`.`last_user_agent`"},
	LoginCount:          whereHelpernull_Uint{field: "`auths`.`login_count`"},
	ResetForce:          whereHelpernull_Bool{field: "`auths`.`reset_force`"},
	ResetPasswordTime:   whereHelpernull_Time{field: "`auths`.`reset_password_time`"},
	ResetPasswordToken:  whereHelperstring{field: "`auths`.`reset_password_token`"},
	ResetTokenExpiresAt: whereHelpernull_Time{field: "`auths`.`reset_token_expires_at`"},
	Locked:              whereHelpernull_Bool{field: "`auths`.`locked`"},
	LockedTime:          whereHelpernull_Time{field: "`auths`.`locked_time`"},
	LockedByUserID:      whereHelpernull_Uint64{field: "`auths`.`locked_by_user_id`"},
	IsDeleted:           whereHelpernull_Bool{field: "`auths`.`is_deleted`"},
}

// AuthRels is where relationship names are stored.
var AuthRels = struct {
	Person string
}{
	Person: "Person",
}

// authR is where relationships are stored.
type authR struct {
	Person *Person
}

// NewStruct creates a new relationship struct
func (*authR) NewStruct() *authR {
	return &authR{}
}

// authL is where Load methods for each relationship are stored.
type authL struct{}

var (
	authAllColumns            = []string{"id", "person_id", "created_at", "modified_at", "password_digest", "yubikey_digest", "yubikey_backup_digest", "email", "email_confirm_token", "email_confirmed", "email_confirm_time", "last_ip_address", "last_login_at", "last_user_agent", "login_count", "reset_force", "reset_password_time", "reset_password_token", "reset_token_expires_at", "locked", "locked_time", "locked_by_user_id", "is_deleted"}
	authColumnsWithoutDefault = []string{"person_id", "password_digest", "yubikey_digest", "yubikey_backup_digest", "email", "email_confirm_token", "email_confirm_time", "last_ip_address", "last_login_at", "last_user_agent", "reset_password_time", "reset_password_token", "reset_token_expires_at", "locked_time", "locked_by_user_id"}
	authColumnsWithDefault    = []string{"id", "created_at", "modified_at", "email_confirmed", "login_count", "reset_force", "locked", "is_deleted"}
	authPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthSlice is an alias for a slice of pointers to Auth.
	// This should generally be used opposed to []Auth.
	AuthSlice []*Auth
	// AuthHook is the signature for custom Auth hook methods
	AuthHook func(context.Context, boil.ContextExecutor, *Auth) error

	authQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authType                 = reflect.TypeOf(&Auth{})
	authMapping              = queries.MakeStructMapping(authType)
	authPrimaryKeyMapping, _ = queries.BindMapping(authType, authMapping, authPrimaryKeyColumns)
	authInsertCacheMut       sync.RWMutex
	authInsertCache          = make(map[string]insertCache)
	authUpdateCacheMut       sync.RWMutex
	authUpdateCache          = make(map[string]updateCache)
	authUpsertCacheMut       sync.RWMutex
	authUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authBeforeInsertHooks []AuthHook
var authBeforeUpdateHooks []AuthHook
var authBeforeDeleteHooks []AuthHook
var authBeforeUpsertHooks []AuthHook

var authAfterInsertHooks []AuthHook
var authAfterSelectHooks []AuthHook
var authAfterUpdateHooks []AuthHook
var authAfterDeleteHooks []AuthHook
var authAfterUpsertHooks []AuthHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Auth) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Auth) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Auth) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Auth) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Auth) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Auth) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Auth) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Auth) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Auth) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthHook registers your hook function for all future operations.
func AddAuthHook(hookPoint boil.HookPoint, authHook AuthHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authBeforeInsertHooks = append(authBeforeInsertHooks, authHook)
	case boil.BeforeUpdateHook:
		authBeforeUpdateHooks = append(authBeforeUpdateHooks, authHook)
	case boil.BeforeDeleteHook:
		authBeforeDeleteHooks = append(authBeforeDeleteHooks, authHook)
	case boil.BeforeUpsertHook:
		authBeforeUpsertHooks = append(authBeforeUpsertHooks, authHook)
	case boil.AfterInsertHook:
		authAfterInsertHooks = append(authAfterInsertHooks, authHook)
	case boil.AfterSelectHook:
		authAfterSelectHooks = append(authAfterSelectHooks, authHook)
	case boil.AfterUpdateHook:
		authAfterUpdateHooks = append(authAfterUpdateHooks, authHook)
	case boil.AfterDeleteHook:
		authAfterDeleteHooks = append(authAfterDeleteHooks, authHook)
	case boil.AfterUpsertHook:
		authAfterUpsertHooks = append(authAfterUpsertHooks, authHook)
	}
}

// One returns a single auth record from the query.
func (q authQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Auth, error) {
	o := &Auth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for auths")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Auth records from the query.
func (q authQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthSlice, error) {
	var o []*Auth

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Auth slice")
	}

	if len(authAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Auth records in the query.
func (q authQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count auths rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if auths exists")
	}

	return count > 0, nil
}

// Person pointed to by the foreign key.
func (o *Auth) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "`persons`")

	return query
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuth interface{}, mods queries.Applicator) error {
	var slice []*Auth
	var object *Auth

	if singular {
		object = maybeAuth.(*Auth)
	} else {
		slice = *maybeAuth.(*[]*Auth)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authR{}
		}
		args = append(args, object.PersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authR{}
			}

			for _, a := range args {
				if a == obj.PersonID {
					continue Outer
				}
			}

			args = append(args, obj.PersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`persons`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(authAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.Auth = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.Auth = local
				break
			}
		}
	}

	return nil
}

// SetPerson of the auth to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.Auth.
func (o *Auth) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `auths` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"person_id"}),
		strmangle.WhereClause("`", "`", 0, authPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &authR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			Auth: o,
		}
	} else {
		related.R.Auth = o
	}

	return nil
}

// Auths retrieves all the records using an executor.
func Auths(mods ...qm.QueryMod) authQuery {
	mods = append(mods, qm.From("`auths`"))
	return authQuery{NewQuery(mods...)}
}

// FindAuth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuth(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*Auth, error) {
	authObj := &Auth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auths` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from auths")
	}

	return authObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Auth) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no auths provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authInsertCacheMut.RLock()
	cache, cached := authInsertCache[key]
	authInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authAllColumns,
			authColumnsWithDefault,
			authColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authType, authMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authType, authMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `auths` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `auths` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auths` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into auths")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "schema: unable to populate default values for auths")
	}

CacheNoHooks:
	if !cached {
		authInsertCacheMut.Lock()
		authInsertCache[key] = cache
		authInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Auth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Auth) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authUpdateCacheMut.RLock()
	cache, cached := authUpdateCache[key]
	authUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authAllColumns,
			authPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update auths, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auths` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authType, authMapping, append(wl, authPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update auths row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for auths")
	}

	if !cached {
		authUpdateCacheMut.Lock()
		authUpdateCache[key] = cache
		authUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for auths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for auths")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `auths` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in auth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all auth")
	}
	return rowsAff, nil
}

var mySQLAuthUniqueColumns = []string{
	"id",
	"person_id",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Auth) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no auths provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuthUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authUpsertCacheMut.RLock()
	cache, cached := authUpsertCache[key]
	authUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authAllColumns,
			authColumnsWithDefault,
			authColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			authAllColumns,
			authPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("schema: unable to upsert auths, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "auths", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auths` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(authType, authMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authType, authMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert for auths")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(authType, authMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "schema: unable to retrieve unique values for auths")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "schema: unable to populate default values for auths")
	}

CacheNoHooks:
	if !cached {
		authUpsertCacheMut.Lock()
		authUpsertCache[key] = cache
		authUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Auth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Auth) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Auth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authPrimaryKeyMapping)
	sql := "DELETE FROM `auths` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from auths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for auths")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no authQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from auths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auths")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `auths` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from auth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auths")
	}

	if len(authAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Auth) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuth(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `auths`.* FROM `auths` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AuthSlice")
	}

	*o = slice

	return nil
}

// AuthExists checks if the Auth row exists.
func AuthExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `auths` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if auths exists")
	}

	return exists, nil
}
