// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (7.251kB)
// override/templates/singleton/mysql_upsert.go.tpl (1.13kB)
// override/templates_test/singleton/mysql_main_test.go.tpl (5.129kB)
// override/templates_test/singleton/mysql_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.848kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\xdb\xc8\x11\x7f\x96\x3e\xc5\x9c\x90\xbb\xa3\x0a\x86\x49\x81\xa2\x0f\x2e\xfc\x10\xff\x49\xce\x8d\x9d\xb3\xad\xb8\x06\x6a\x18\xc1\x9a\x1c\xca\x0b\xaf\x76\x99\xe5\xd2\xb6\xca\xf2\xbb\x17\x33\x4b\x8a\xa4\x2c\xc9\x4a\x1a\x1f\xee\xc9\x22\x77\x76\xe6\xb7\xf3\x9b\x7f\x4b\x97\xe5\x6b\x78\x25\x94\x14\x39\xec\xec\x42\xf4\x8e\x7e\x61\x1e\x7d\x16\x37\x0a\xc1\xff\x89\x3e\x89\x19\x56\xd5\x90\x45\xf3\xf8\x16\x67\xc2\x2f\xd3\x86\x56\x02\xfe\x0b\xd1\xa4\x5d\xe5\x0d\x32\x85\xe8\x5d\x92\x7c\x50\xe6\x46\x28\x78\x5d\x55\xc3\x37\x6f\xe0\x22\xcb\xd1\xba\x0f\x20\x9c\xc3\x59\xe6\x72\x10\x1a\xa4\xa6\x77\x21\x08\x9d\x40\x62\x90\xdf\x15\x59\x22\x1c\x82\xb1\x20\xa7\xda\x58\x04\xa3\x21\x36\x3a\x55\x32\x76\xd1\x30\x2d\x74\x0c\x81\x81\xbf\x94\xa5\xc7\x1f\x5d\x64\x13\xa9\xa7\x85\x12\xb6\xaa\xc6\x8d\x95\x80\x41\x68\xe3\x20\xfa\x64\xf6\x8d\x76\xf8\xe8\xaa\x2a\x76\x8f\xa4\x8a\x1e\xa2\xfa\x65\x08\x65\x89\x3a\x21\x90\xb5\xe5\x7d\xa3\x8a\x99\xce\xc3\x1a\x5c\xfd\x08\x37\x46\xaa\xa8\x7e\x18\x03\x5a\x6b\x2c\x94\xc3\x81\x45\x57\x58\x0d\x26\xf2\x86\xbd\xdd\xae\x4d\xde\xf7\x01\xdd\xc1\x5e\x30\x2e\x4b\x54\x39\x32\x8e\x10\x9a\x85\x5a\xb2\x5e\xd7\x49\x55\x85\x1b\x91\x8c\x87\xd5\x70\xb8\x00\x3d\xf4\xee\x26\x07\x76\x5c\x4e\x3f\x4f\x85\x96\xf1\x92\xf3\x4f\xff\x3f\xef\x03\xeb\xcc\xe9\x1d\x3b\x60\x6b\x3a\x4e\x5f\x9a\x8f\x72\x38\x90\x29\x81\xa2\xe8\xfc\x23\xc9\xf8\x07\x1b\xfd\x69\x17\xb4\x54\x84\x62\x90\x91\x8b\x02\xd6\x77\x69\x45\x76\x68\x6d\x80\xd6\x8e\xc7\xc3\x41\xb5\x8a\xb8\x35\x4c\xad\x22\x0a\x8a\x5c\xea\x29\x3d\xe3\x23\xc6\x85\x33\xf6\x5b\x12\xa7\xa3\x3a\xfb\x3e\x16\x4f\x9f\xfa\x93\x80\x78\xdf\x1d\xd6\x90\x3a\x5e\x7d\x4a\x6d\x2b\x5e\xbf\xea\xec\x7a\xde\xd7\xdb\x53\xbe\x22\xce\xba\x71\x45\x30\x5e\x8e\xd6\x7b\x61\x61\x36\x9f\x9c\x1d\xaf\x74\xe6\x85\x96\x5f\x8b\xc6\x2a\xec\xc2\xd5\x75\xee\xac\xd4\xd3\x92\xeb\xac\x15\x7a\x8a\xf0\x4a\x86\xf0\x2a\x36\xaa\x53\x69\x9b\x0d\x64\x61\x40\x92\x32\x65\x91\xc8\xeb\xa3\xb7\xa3\xb2\xe4\x37\xbe\x6c\x8f\x42\x2f\xd7\xc0\xaa\x7f\x57\x8c\x76\x11\x0b\x2f\x11\x65\x13\xc4\x1e\x53\x90\x98\xb8\x98\xa1\x76\xc2\x49\xa3\x21\x35\x16\x6e\xcd\x03\x38\x03\x99\x35\x19\x5a\x35\x87\x22\xc7\x3e\x1d\x6c\xb1\xc7\xc8\xb6\x41\xfa\xe7\x8a\xd1\x45\x9b\x90\x29\x18\xd8\x6d\xc3\xa9\x6e\x1b\xbc\x9e\x47\x9f\xf0\x21\x18\x95\x65\x74\x7a\x37\xf5\xec\xed\x80\x36\x50\x96\xbd\x46\x4c\xee\xba\x97\x09\x26\xec\xc2\x82\x4f\x3b\xe2\xf8\xf3\x4c\x13\x91\x8a\xa8\x19\x39\x39\xc3\xdc\x89\x59\xf6\xc5\x4b\x7d\xb9\x45\x95\xa1\x1d\x41\x04\x95\x97\x6e\x73\xe4\x37\x63\xee\xea\xb0\xea\x66\x53\x62\xf6\x30\x35\x16\xbd\x53\x59\x68\xeb\xd4\x7a\x9a\x3c\xed\x69\x09\xee\xa0\x8d\xc5\xe1\x40\xff\xe7\x00\x53\x51\x28\xc7\x83\xc8\xd7\x02\xad\xc4\x3c\xfa\x64\xf4\xbf\xd1\x9a\x7a\x69\x82\x44\x6b\x4d\xfa\x81\x79\xd0\x2d\xed\xb5\xa7\x2f\xa5\xbb\xad\x85\x43\x30\x63\x52\xeb\x13\xe3\x19\xad\x5b\xe6\x29\xeb\x64\x07\x29\xd4\xc1\x42\xf7\x98\x18\x7d\xbb\x8e\xcf\x58\x68\x72\x96\xa7\x00\x1e\xa4\xbb\x05\x01\x8e\x27\x28\x77\x2b\x1c\xd4\xeb\x4d\xee\x50\x1e\x09\x28\x58\x33\xc4\x6c\xb7\x61\xf7\xcd\x1b\xd8\x2b\xa4\x4a\x20\x16\xf1\x2d\xc2\x1d\xce\x41\xea\xd7\x4a\x6a\x84\x62\xaa\xa4\x9a\xc3\x6b\x98\xcd\xf3\xaf\x0a\xee\x73\xc8\xe8\x6f\x66\xcd\x8d\xc2\x59\x3e\x1c\xdc\x14\x29\xb9\x20\x77\x76\x26\xf4\x54\x21\x35\xb9\xbd\x22\x4d\xd1\x06\x63\x5e\x8d\x2e\xad\x74\x38\xe1\x22\x14\xe4\xce\xc6\x46\xdf\x47\x47\xce\x88\xa0\x17\xe7\xd1\x47\xa9\x13\x2a\x77\x14\x7c\x5f\x42\x88\x49\xab\x2f\x57\x7d\xb9\x7d\xa3\x72\x76\xc9\xb2\xee\x98\x4f\xd3\xbe\xde\x9b\x3b\x0c\x7e\x8d\x7e\x7d\x0e\x46\xbf\x0c\xac\x87\xd1\x97\xfb\x1e\x18\x4f\x75\x76\xa2\xf3\x07\xe8\x6a\x42\x72\x83\x2a\xe2\x76\x67\x17\x68\xb5\x5e\x18\x0f\x07\x2d\x79\xa7\x45\x43\xde\x4d\x91\x8e\x39\x95\x57\xa6\x85\x4f\xdb\x7d\x0a\x97\x93\xc2\x45\xe7\xc7\x26\xbe\x23\x4d\x1c\x40\xa1\x8f\xa3\x84\x0c\x3d\xbf\xff\xea\x0e\xe7\xd7\x5b\x1b\xba\xd0\xca\x9b\x1a\x0e\xa8\x0f\x52\x1d\xe0\x9c\xf0\xd9\xf3\x53\x6d\x98\x1c\xd0\x0c\x9f\x16\x1d\x01\xe9\xb3\x77\xd4\x79\xa2\x3c\x1d\x0e\x06\xeb\x10\xbc\x53\xaa\xc9\xd2\x0d\x52\x2b\xea\xc4\x76\xd2\xa6\x70\xdd\x0d\x6d\x40\xd0\xe3\x78\x38\x18\xd4\xfd\x70\x67\x77\x29\x0f\x2e\x3a\x4f\x3f\xe4\x08\xa7\x56\xce\x84\x9d\x7f\xc4\x79\x47\x98\x1c\xdd\xd4\x25\x6f\xbf\x53\x94\x9e\xef\x32\x85\xf6\xf5\xc8\x34\x65\x6a\xa9\xe7\x84\x10\x9b\x42\x25\x5c\xf5\x6f\xb8\x04\xd5\xc7\xf5\x05\x0a\x94\xcc\xb9\x07\x71\x99\x22\x73\xd0\x2d\x35\x13\x9a\xa7\x67\x99\x42\xea\xfe\x81\x45\x17\xb6\x49\x40\x9b\x38\x1a\x22\xaa\xce\x73\xd8\xf5\xfa\x7d\x3c\x9d\xd1\xab\x13\xaa\xcd\x41\x22\x85\xc2\xd8\x85\x30\x5a\x82\x36\x6a\x1a\x71\xd3\x81\x5b\x8d\x16\xbd\x06\xd8\x85\x74\xe6\xa2\x49\x66\xa5\x76\x29\x33\x30\x9a\x1c\x1e\x1f\xee\x7f\x86\x9f\x73\x78\x7f\xfe\xfb\x09\x9d\xf7\xf8\xac\xaa\x96\x74\x97\x65\x74\x7e\x56\x55\x70\xf9\xdb\xe1\xf9\x21\xfc\x9c\x8f\x98\x17\x3f\xa8\xe5\xd1\x3f\x8d\xd4\x41\x7b\xca\xa3\x04\xb5\x3b\x2b\x8c\xc3\x89\x92\x31\x36\x88\xa3\xe3\xb3\x10\x9a\xdf\xe7\x67\x1c\xe8\xe3\x10\x46\xe1\x68\xdc\x68\xab\x15\x5c\xde\xa2\xc5\x7d\x25\x8a\x1c\x99\x1f\x02\x34\xf2\x07\x3e\xf7\x3f\xdf\x76\x1d\xb7\xa0\xdd\x1f\xf6\x5e\xa8\x02\x4f\x44\x96\x49\x3d\x0d\x39\xe1\xda\x86\xb7\x27\x75\x52\x2f\xad\x6b\xa0\x9f\xe7\x19\x86\xeb\xca\xc0\x42\x6d\xeb\xe1\x7a\x48\xe8\x34\xf7\x5e\x77\xa7\x1a\xd6\xc4\x23\x1d\x98\x04\xeb\x60\x5c\x70\xf3\xd2\x60\xc9\x2e\x19\x5c\x01\xb5\x8f\x95\xc1\x56\xbe\xc7\xb2\x1b\xb9\x58\x63\xca\x94\x1d\xe9\x44\x5a\x8c\x29\x6e\xfd\x8b\x7f\x91\xc4\xef\x69\x60\xa8\xfd\xdc\x0b\xd5\x1b\x2d\x78\x31\x7f\x6f\xcd\xac\x39\x02\x2b\xac\x4b\x6d\x8f\xa4\xb1\x2f\x8d\x1e\x49\x0e\x57\xd7\x52\x3b\xb4\xa9\x88\xb1\xac\x16\x33\xc6\xb2\xb3\x3a\x8e\x6c\x36\xb6\xc6\x4f\x9d\x5d\x6f\xba\xa3\xa3\x99\x15\x7b\x03\xf2\x62\xf6\xe3\xc9\xf5\x00\x6f\x8a\xe9\x89\x49\x90\x4d\x51\xf6\xbc\xe7\xec\x51\x3a\x68\xd7\xb9\x6f\xd9\xc6\x00\xe7\xef\xf8\x79\x69\x72\xd9\xb8\x9e\xff\x68\xfe\xee\x1b\x3e\xca\x59\x38\x88\xdd\x23\x5f\xed\x06\x0f\xbc\x8d\x9b\xe1\x92\x2a\x3a\x2a\xcb\x2d\xdb\x7c\xd8\x02\xd7\xc3\x2a\x34\xcd\xd5\x8d\x4a\x6f\x2c\xf4\xb1\xc8\x9d\xef\x40\x47\x07\xdd\x3b\xd8\xd2\x4a\x7d\x17\xe3\x9b\xd8\xaa\xa5\xd5\x9e\xb6\x98\xf3\x94\x5a\x8f\xda\x34\x30\xf3\xc5\x24\xe8\xa0\xf6\xf0\xa2\x28\x1a\xb3\x96\xd6\x5b\xeb\x36\xd7\x16\x02\x9e\xc6\x37\x28\xaa\x0f\xda\xd3\xb9\x1a\xe6\x97\x26\x3d\xbf\x0d\xe0\xd3\x6d\xdf\x0e\xad\xb9\x1c\xac\x48\xe0\x7e\x43\xa3\x8b\x38\xdd\xc2\x7d\xad\xdc\xd4\xd6\x68\x1a\x5b\xee\x1f\xdd\x74\x58\x4d\x20\xa5\xa9\xa2\xb7\x07\x20\xb5\xfb\xfb\xdf\x7a\xe0\x68\xd1\x4f\xeb\x27\x22\x83\xab\xeb\xa2\x16\xa1\xf7\x4d\xb1\xe6\x21\xb4\x9f\xe0\x1b\x32\x7c\xd1\xb7\xa7\xc6\x19\xe0\x99\xaa\xbe\x9f\x3d\x8b\xd4\xa3\x6c\x7c\xef\xa3\x24\xea\x88\x25\x34\xfc\xad\x75\xe7\xa1\xb5\x93\xb9\x8e\xdf\x0b\xa9\x1a\x4b\xaf\x62\xa3\xf8\xeb\x2e\x8f\x66\x09\x3e\x36\x49\x70\xfa\x11\xe7\x8b\x9b\xfd\xdb\x96\xb2\xa5\xef\x15\xfc\x29\x8d\x47\x84\x85\xa6\x9e\xe8\x67\xe9\x94\x9f\x40\xeb\x5a\xbe\x24\x4d\xb2\x26\xf2\x38\xbc\x6c\x55\x01\x8f\xab\xb1\x51\x11\xf5\x81\xaa\x0a\xfc\xa9\xfd\xc9\x6a\x9e\xb8\x4a\xfe\xf2\xcb\x7a\x0f\xff\x95\x56\x97\x57\xae\xde\x5e\xd3\xda\xe6\xc6\x72\x35\x6a\xdd\x52\x55\xa3\xeb\xf5\x54\xf5\x2e\xb8\x8b\x18\x79\xb1\x7e\xd7\x9d\xa9\x7e\x40\xca\x58\x74\x56\xe2\x3d\x36\x77\x51\xee\x26\xf9\x9a\x14\x02\x3a\x6e\x2f\xdc\x37\xf5\xc4\x6d\x7a\x6b\xd8\x66\xd5\xf8\x05\xba\x55\x33\x1b\x6e\xd1\xb0\xba\xc7\xf2\x75\xea\x0f\xeb\x5d\x6b\x51\x3e\x3c\x83\xad\xd3\xc9\x56\xf8\xad\x53\x9a\x59\xfd\xb9\x79\x08\xfa\x06\x9f\x6a\x8e\x26\xb1\xe0\x59\x8e\x86\x0e\x6f\xaa\xeb\x83\x15\x2a\x57\x54\xfc\x6f\x55\xdf\x34\x83\x1f\x10\xce\x99\xc9\x0a\xfe\x2c\x96\xf8\x8b\xdb\xe6\x78\xa6\xf2\xd7\x4d\xe7\x9d\x27\xf7\xd6\xed\x2e\xc2\xcd\x85\x7b\x0b\x71\xbe\x60\xc3\xae\xf7\xd4\xd6\x06\x16\x17\xed\xc1\x86\x2f\x7a\x8b\x7f\x4e\x25\xe6\x5d\xea\xd0\x7e\xd7\xd7\xbc\xba\x9c\x75\x66\x10\x56\xaa\xa9\x59\x74\xbf\x2a\xff\x2f\x00\x00\xff\xff\x2c\xad\xdb\x70\x53\x1c\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xd, 0x91, 0xa7, 0x6a, 0x40, 0x2d, 0xf, 0xf1, 0x1, 0x40, 0xa9, 0x9b, 0x76, 0xb6, 0xe1, 0x6e, 0x24, 0xb5, 0x2e, 0x33, 0x6d, 0xa, 0xf3, 0x19, 0x94, 0x39, 0x12, 0x6, 0xfa, 0x31, 0xd3}}
	return a, nil
}

var _templatesSingletonMysql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8e\xd3\x30\x10\xc7\xcf\xf6\x53\x0c\x91\x56\x8d\x25\x2b\xcb\x5e\x91\x7a\xd8\xa5\x65\x15\x28\xfd\x2e\x08\x21\x0e\x6e\x3d\x6e\x2d\xa5\x4e\xf1\x47\xa1\x42\x7d\x77\xe4\x24\x6d\xb3\x4b\x41\x1c\xf6\x92\x8c\x3d\x33\x7f\xcf\x6f\x66\x6e\x6f\x61\x19\x74\x21\x17\x3b\x87\xd6\x4f\x02\xda\xc3\xc7\xc3\x6c\x32\xa8\x6f\x1d\x08\x88\x07\xe7\x85\xc7\x2d\x1a\x0f\xce\x5b\x6d\xd6\x10\x5c\xfc\xfa\x0d\x42\xa8\x12\x7b\xc2\x0b\xd8\xd9\x72\xaf\x25\xca\x8c\xaa\x60\x56\xd7\x75\x53\xa9\x05\x48\xab\xf7\x68\x5d\xd6\xd3\xa2\xc0\x95\xe7\xe0\xc5\xb2\xc0\xa1\xd8\x62\xa3\xcf\x21\xec\xa4\xf0\xc8\xe1\xc7\x46\x7b\x2c\xb4\xf3\xf0\xf5\x5b\xed\x63\xa7\x1a\x7e\x51\x72\xf1\x76\xe3\xed\x56\x98\x75\x81\x59\x2e\xd1\xf8\x49\x28\x3d\xce\x0a\xbd\xc2\xf8\x64\x36\x98\x70\x88\xff\xe9\xa4\xa5\xc9\x28\xb9\xbc\x7c\x5d\xe1\x8f\xe4\x73\x02\xa3\x94\x2c\x83\x82\x37\xed\xc4\x47\xf4\x0f\x41\x29\xb4\x29\xa3\x44\xa2\x42\xdb\x72\x8e\xc3\xc9\xb9\x0c\x2a\xa6\xef\x85\x85\x55\x59\x84\xad\x71\x0d\x14\x25\x5a\x41\x81\x26\xbd\xd4\x08\xaf\xba\xf0\x3a\xc2\x92\x53\x68\xb7\x09\x76\xd9\xfb\x52\xb7\x42\x39\x24\x3c\x61\x94\x1c\xe9\x59\xa6\x6e\x23\x83\xee\x49\x43\x6d\x7d\xf6\x6e\x67\xb5\xf1\x2a\xa5\x84\x44\x02\x1e\xff\x49\x3e\x9c\xf5\xa7\x73\xc8\x1f\x87\xa3\x69\x1f\xf2\xe1\x7c\x04\x37\x0e\xd2\x1b\xc7\xe0\xd3\xfd\x60\xd1\x9f\x55\x76\x52\x05\x9f\x7b\x50\x9d\x9a\xb2\x2a\xbb\x05\x5b\x88\x15\x6e\xca\x42\xa2\x75\x55\x13\x17\x0e\x73\x23\xf1\x67\xdb\xc1\x9f\xb1\x72\xb8\xe3\x70\xc7\xa2\x14\xa3\x84\x58\xf4\xc1\x1a\x58\x06\x95\xcd\x2a\xe2\xb4\xa1\x7b\x46\xd1\x40\x9c\x19\xfe\x52\x3c\x8c\x86\xd0\x5b\x8c\x07\xf9\xdb\xfb\x79\x1f\x3e\xf4\xbf\xc0\x62\xdc\x8b\x66\x45\xf5\x04\xaa\xc5\xf4\x62\x48\x71\xe2\xaa\xb4\xa0\x39\xec\xe3\xd6\x58\x61\xd6\xd8\x2c\x7a\x35\x1b\xad\x40\x5f\xa6\x1d\xa9\xb2\xcf\x56\x7b\x7c\x38\x78\x4c\x3b\xbc\x13\x5b\x72\xa4\x84\x7c\x8f\x8b\x29\x9f\x2e\xde\x3f\x36\x76\xcf\x68\x4b\xac\x69\x64\xad\x71\xcd\x93\x40\xb7\x69\x5a\x9a\xfc\x67\x66\x5d\x20\xeb\x34\xd3\xb9\x36\xb6\x23\xfd\x1d\x00\x00\xff\xff\x4c\x0d\x4e\x35\x6a\x04\x00\x00")

func templatesSingletonMysql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertGoTpl,
		"templates/singleton/mysql_upsert.go.tpl",
	)
}

func templatesSingletonMysql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xcc, 0xa0, 0x4c, 0x62, 0x37, 0xa8, 0x14, 0xaa, 0x37, 0x45, 0xfd, 0x34, 0x76, 0xe0, 0x86, 0x6, 0x53, 0x4, 0xc, 0xf3, 0x3, 0xab, 0xc9, 0xcc, 0x8f, 0xb8, 0xe0, 0xcd, 0xca, 0x43, 0x5}}
	return a, nil
}

var _templates_testSingletonMysql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xe3\x36\x16\x7e\x96\x7e\xc5\xa9\x81\xe9\x4a\x53\x85\x19\xa0\xc0\x3e\xa4\x10\x82\x89\xe3\x14\x41\x27\x37\x3b\xbb\xc5\xa2\x29\x5a\x46\xa2\x13\x22\x12\xa9\x90\x54\x1c\x6f\x90\xff\xbe\x38\xa4\x2e\x94\x63\x79\x33\xbb\xf3\xd8\xa7\x44\xe2\xc7\x73\xf9\xce\xe1\xe1\x27\x3f\x51\x05\xea\xee\xf9\x6c\xbd\xb8\xfa\xf2\xc0\xd6\x90\x82\x62\x77\xec\xb9\x22\x67\xb5\x36\x53\x59\x56\xbc\x60\xd1\x9f\xd1\x61\x19\x47\x51\x72\x23\xe2\xc3\x1b\xfd\xc3\xf4\xe2\x7c\x71\x3d\xff\x7c\x7a\x7e\x4d\x3e\x1e\x9e\x5c\xcc\x67\xa7\x3f\x9f\xc3\x2f\xb3\x7f\x91\x8f\x87\x37\x22\xfe\xe1\xcf\x38\x0c\xcd\xba\x62\x50\xae\xf5\x63\x71\xcd\xb4\x61\x0a\xb4\x51\x75\x66\xe0\x25\x0c\xf2\xdb\xa9\x14\x02\x3e\xea\xc7\x82\x1c\x1f\x85\xf8\xe2\x9c\x96\x0c\x10\xc2\xc5\x5d\x18\xdc\x4b\x6d\x00\xfa\xe7\x5a\x33\xe5\x3f\x57\x54\x6b\xff\x59\xeb\xa2\x94\x39\xeb\xd7\xa5\xb2\xfb\xb9\x30\x61\x18\xc8\xca\x70\x29\x4e\x78\xd1\x01\xc2\xc0\x30\x6d\x8e\x8f\xac\xd7\xce\xc8\x03\xaf\x16\x57\x5f\xa6\x65\x0e\xb7\x52\x16\xe1\x6b\x18\x2e\x6b\x91\x01\x17\xdc\x44\xb1\x8b\xfb\x8c\x72\x01\x29\x7c\xef\xe5\xf5\xf2\xda\x21\xa3\x12\x3e\x7a\x2b\x31\x68\x66\xea\x2a\x8a\x81\x29\x25\x15\x5a\x40\xae\x99\x52\xee\x45\x18\x06\x4f\xbc\x62\x8a\x2c\x98\x39\x66\x4b\x5a\x17\x26\x9a\xd8\xfd\xa4\x49\x68\x92\xc0\xc4\xa8\x9a\x4d\xe2\x71\x28\xe6\x3a\x49\xe0\xc7\x1f\x3f\xfd\x3d\x0e\xc3\xa0\x24\x0d\x99\x29\xb8\x1d\x3f\x33\xb3\xb0\x19\xb6\x1b\xf2\x5b\x41\x4b\x6b\xb2\x24\x96\xe8\x51\x24\xae\x3a\x9c\x2d\xc0\x28\x0e\x57\x1d\xce\x16\x66\x14\x87\xab\x0d\x0e\x0b\xe4\xe1\x4e\xc5\x30\x1f\x0b\x6a\xab\x3a\x6a\xaf\x65\xc9\xa2\xbd\x8a\x8e\x6e\x40\x8c\x9f\xbe\x57\x72\x6f\xcf\x91\x94\x45\xe7\xe2\x81\x57\xfa\xb1\xc8\xca\x7c\x82\xec\x62\xed\x52\x78\xa2\x05\x25\x47\xec\x8e\x8b\x7f\xd2\x82\xe7\x14\xdb\x2b\x8a\x49\xf3\xc0\xa2\x30\x08\x2c\xc4\x39\x3f\x97\x66\x56\x56\x66\x1d\x39\x1a\x13\x18\xb0\x96\x8c\x82\x91\xfd\x0e\xec\x4a\xd1\x81\xcf\xa5\x89\xec\x3f\xb3\xc7\x9a\x16\x3a\x72\x8c\x26\xf0\xa9\xdb\xe0\x68\xdc\x61\xde\xb5\x49\x87\x6f\x69\x19\xdf\xd0\xb0\xdd\xed\xe8\xd8\x4f\xc2\x20\x26\xd3\x7b\x96\x3d\x44\xc8\x11\x5f\xda\x16\xff\x2e\x05\xc1\x0b\x6c\xfa\x40\x31\x53\x2b\x81\x6f\xc3\xe0\x35\x0c\x83\xfd\x7d\x98\x2a\x46\x0d\x03\x0a\x8a\x8a\x5c\x96\xfc\xdf\x2c\x87\xfc\x16\x30\x06\x62\x4d\x14\x4c\x44\x7e\x51\x63\x48\x53\xf8\x64\xcd\x6d\xd4\xba\xb3\x40\x16\x86\xde\x16\xcc\x2d\x74\x19\xc6\xce\x67\x13\x55\x0a\x25\x29\xe9\x03\xbb\xe8\x66\x42\x14\xff\x34\x1e\xaf\x54\x9a\xfc\xaa\x68\x15\x31\x85\x85\xcb\x64\x5d\xe4\xe2\x6f\x06\xd0\x04\xb8\xb9\x02\x4b\x5e\xd8\x76\x6a\xbc\x7c\x37\x68\x2b\x34\xe7\xb9\xce\x95\xac\xae\x6d\xf0\x5b\xdc\x0e\x78\x0a\x5e\x87\x3b\x33\x4b\xd8\xbb\xf7\x86\x41\x90\xd7\x65\x85\x21\x1c\xa4\xc0\x9e\x59\x46\xa6\xb2\x2c\xa9\xc8\x9b\xce\xc6\xd5\x49\x82\x21\xb9\x71\xa2\x1d\x17\x09\x4c\xf6\xf6\x84\xdc\xcb\xa9\xa1\x6e\xb9\x25\x31\x70\x11\x8c\x5b\x1c\xb3\x86\xa6\x6e\xa9\x66\x76\xdd\x2b\x28\xc6\xa8\x12\x58\xa1\x39\x2e\xc9\x25\xaf\x58\x14\xf7\x71\x2f\x4c\x8e\x39\x1e\xa4\xf0\xfd\xed\xda\x30\x4d\x8e\xea\xe5\xd2\x8e\x5b\x2f\x94\x71\x50\x6f\x88\x2c\x4c\x2e\x6b\x1c\x37\xab\xe1\x4b\x47\xed\xc0\x5d\xe8\x1b\x47\x8c\x1d\xf7\x82\xad\x4e\x7e\x61\xeb\x63\xa6\x8d\x92\x6b\xa6\x22\xef\xba\x4c\x40\xc5\x9b\x9b\x9c\xe1\x8d\x20\x43\xbf\x9e\x7d\x14\x54\x99\xdd\xe5\xdc\x68\xc1\x25\xe5\x05\xcb\xc1\x48\xd0\xb8\x17\xba\x62\x42\xe6\xaa\x81\xad\x38\x6c\x1e\x3f\xb6\x6f\xe2\x6e\xc3\xd5\xb6\xc4\x7e\xa5\x7c\xab\xa3\x65\x69\xc8\xa5\xe2\xc2\x14\x02\x3d\xc4\x9b\xef\x06\xd5\x68\x66\x50\x14\xc7\xef\x8c\x71\x45\xb9\x81\xa5\x54\xa3\xac\x84\x41\xf0\x07\x36\x02\x99\x16\x52\xb3\x28\x86\xfd\x7d\xf8\xbc\x44\x75\xd2\x9e\x16\xae\x21\x97\x82\x25\x90\x21\x02\xcc\x3d\x83\x95\xe2\x86\x01\x13\x39\xc8\xa5\x7d\x51\xf1\x8a\x85\xdb\x19\xfe\x5f\xf3\xde\x68\x96\xff\x33\xf3\xcd\x5e\xc0\xc4\x1b\x23\x82\x17\x3b\xf4\x8a\x2e\xce\x64\xce\x22\x4f\x4c\xc5\xcd\x5f\x4c\x43\xaf\xb8\xc9\xee\xc1\xae\xbe\x84\x41\x46\x35\x6b\xf4\xc9\x41\x3f\x35\x27\xf3\xd9\xd5\x3f\x4e\xe7\xb3\xe3\x49\x8b\x58\xd2\x42\x0f\x21\xc7\xa7\x8b\xcf\x47\x5f\x2c\xa4\x19\x18\xfe\xea\xe5\x7c\x76\x32\x9b\x3b\x0b\x3b\xc4\xd5\x70\xd4\x78\x61\x36\x76\x90\xde\x45\x85\xfc\x2e\x23\x1c\x43\x0d\x7c\x0f\xe7\x75\xfa\x41\xdb\x71\xd4\x4b\xc3\x78\xdc\xd1\xe6\x7d\xd1\xcb\x39\x53\x56\x09\x34\x03\x88\xcb\xda\xf0\x82\x5c\xb3\xb2\xb2\xb0\x09\x8a\x37\x67\xbf\xbd\x21\x76\xdd\x8c\xa3\x95\x75\x9d\xb1\xf5\xb2\xd1\xd7\xd3\x4b\x74\x6d\x09\x0e\x83\x3f\x92\xa6\x1d\xa5\xc6\x93\x6e\x1a\x0d\xe1\x1c\x4b\x4d\x4e\x35\xde\xe6\xcf\x5c\x1b\xdb\x82\xee\x6e\xb2\x36\x52\xc0\x2a\x86\xc1\x2b\xb0\x42\x33\xf8\x8a\x38\xed\x8d\x08\x42\x1a\x9c\x0f\x06\xca\x4e\x33\x62\x80\x58\x81\x93\xaa\xe9\x70\xcb\xd5\xe4\xb7\xac\xe0\x4c\x98\xdf\x11\xd2\x2f\x2f\x9b\x55\xdc\x9c\x7e\xd0\x37\xc2\x16\xa7\x09\xfe\x2d\x0c\xb5\x4d\xfa\x21\x6f\x60\xf8\xb4\x15\x86\x02\xab\xb7\x86\x4f\xb1\x27\x2d\x50\x8c\xc6\x98\xa3\x13\x15\x5b\xbc\x50\xad\x57\x52\xe5\xbd\x09\xbb\x05\x53\xdb\x82\xd6\xba\xd8\xc3\x83\xd1\xa3\xbb\xc3\xd4\x2a\xa5\xd8\xb9\x77\x94\x0f\x7d\x76\xfc\x54\x4a\x1a\x99\xc9\x22\x35\x59\xb5\x8b\xc6\x6e\xc0\xfd\xc5\xe4\x57\x30\xe9\x1f\x78\x6c\xfa\xb2\x22\x56\x2b\xc6\xfd\x7c\xc4\x77\xcd\xe5\x30\x3e\x11\x86\x62\xac\x9f\x07\x38\x7a\xf1\x3c\xfa\x93\xa7\x39\xbf\xad\x0a\x82\x0f\xfa\xa7\x37\x4a\xa8\x75\x5e\x12\x55\x8b\x69\x99\x47\xfa\xb1\x68\x75\xf6\x64\x47\x1c\xbe\x9c\xdc\x1d\x05\x22\xfb\x18\xf0\x80\xe3\x1c\xd0\xdf\x34\x1a\xc3\xa8\xca\xe5\x4a\xf8\xb1\xf0\xa5\xd5\x90\xf6\x7b\xff\xed\x3c\x69\x97\x3a\xc6\xff\xab\x88\x3e\xf8\x7a\x15\xed\x5d\x7e\x52\x93\x39\x2b\xe5\x13\xb6\xd2\xbb\x46\x7f\x4b\x00\x0a\xc1\xa4\xbd\x55\x9b\xab\x26\x01\xaa\xee\x34\x10\x42\xda\x9b\xb2\xcb\xda\x2e\xa4\x40\xab\x8a\x89\x3c\xfa\xed\x77\x07\x78\xd9\x94\xc7\xaf\xce\x04\x21\x04\x1b\x30\xdb\xa2\xac\x1b\x8f\x1e\x0e\x61\x9d\x30\x75\x76\x35\x39\x67\xab\x39\xa3\x39\x53\x2e\x52\xb4\xa6\x9d\xe8\xdd\x26\x9f\xf5\xb8\xb2\xce\x7c\xb9\xec\x4c\x74\x2f\xdd\xdd\xe2\x36\x87\x5e\x3d\x70\x79\x5e\x8b\xb7\xa5\xf0\xf5\x4d\x7b\xa1\xa9\x5a\x08\x2e\xee\x0e\x26\x1d\x9b\x2e\xb7\x78\x08\x77\xae\x7d\x15\xb4\xb1\xba\xa1\x91\x36\xbf\x30\xdf\x23\x76\x32\x29\xb0\x55\xa3\xe6\x67\xa8\xc4\x95\x2f\x1e\xef\xda\x8d\xa6\x4d\xac\x79\xeb\x6e\xf8\xb3\x4e\xd0\x23\x1a\xce\x1e\x0b\x72\x51\x31\xd1\x7f\x28\xe5\x8a\x3f\x31\x45\xec\x47\xc4\x51\xcd\x8b\xfc\xaa\x66\x6a\xdd\x24\xd4\xfe\x4e\xe0\xc6\xe4\xf0\x74\xb6\xd3\xbc\x1d\xd7\xcd\x78\xf4\x86\xe2\xb0\x06\x3d\x11\xc9\x1b\x76\x86\x89\xbc\x86\xff\x09\x00\x00\xff\xff\xdd\x6c\xf4\x1c\x09\x14\x00\x00")

func templates_testSingletonMysql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testGoTpl,
		"templates_test/singleton/mysql_main_test.go.tpl",
	)
}

func templates_testSingletonMysql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xa, 0x66, 0xf8, 0x27, 0x50, 0x1f, 0xc8, 0x5, 0xd5, 0x88, 0xc1, 0x79, 0xe3, 0x28, 0xff, 0xb6, 0x1b, 0xf9, 0xfa, 0x1, 0x4b, 0xf0, 0xeb, 0x10, 0x5, 0xf8, 0xdc, 0xfe, 0xba, 0x82, 0x80}}
	return a, nil
}

var _templates_testSingletonMysql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMysql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testGoTpl,
		"templates_test/singleton/mysql_suites_test.go.tpl",
	)
}

func templates_testSingletonMysql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\xd8\x5d\x50\x0b\x85\xd9\x5e\x53\xf8\xe0\x7c\x1c\x82\xb6\x86\x1b\xcb\xe7\x82\x91\x46\x0e\x61\x9a\x54\xc9\x51\x6d\x57\xe0\x7f\x2f\x28\xd9\x8e\x13\x3b\x6d\x0e\xed\x21\x07\x7f\x70\xf0\x66\xde\x7b\x33\x1c\xb6\xed\x19\xfc\x2d\xb5\x92\x1e\x2e\x86\x20\x46\xf1\x1f\x7a\x91\xcb\x7b\x8d\xd0\xff\x88\xb1\x5c\x62\x08\xac\x6a\x4c\x01\x84\x9e\xda\xb6\xcf\x10\xb3\x7a\xa2\x1b\x27\x75\x08\xb3\xda\xa3\x23\x4e\xf0\x5f\x04\x28\x33\x17\x79\x0a\x2d\x4b\x48\x4c\xa4\x93\x5a\xa3\xe6\x29\x63\x89\xaa\x40\xa3\xe1\xfb\x02\xd7\x76\x65\xa6\xca\xcc\x1b\x2d\x5d\x08\x23\xad\xaf\xac\x6e\x96\xc6\xa7\x30\x1c\xfe\x0c\x39\x71\x6a\x29\xdd\xe6\x03\x6e\xf6\x09\x2d\x4b\x12\x12\xd3\x85\xaa\xf9\x20\x7e\xd7\xca\xcc\x81\x3a\x1b\x2b\x45\x0f\x60\x8d\xde\x40\xdd\xe7\xc1\x02\x37\x50\xf4\x99\x83\x94\x25\x61\xaf\x6c\xb9\x99\x7e\xfe\x78\xe0\xef\x91\x72\x66\xd4\xd7\x06\x0f\xf5\xfd\xff\x4b\x4e\x63\xa1\xe9\xd2\x76\x64\x40\x16\x0a\x6b\x2a\xad\x0a\x02\x6b\x7a\x6e\x96\x78\xc4\x32\xb6\xdf\x49\x53\xda\xa5\xfa\x8e\x62\x8c\xab\x29\x62\xc9\x53\x96\x7c\x93\x0e\xd0\x75\x1f\xeb\x58\x72\x7e\x0e\x23\x22\x5c\xd6\x04\xf4\x80\x70\x3b\x9e\xde\xdc\xe5\xe0\x55\x89\x60\x2b\x90\x06\x66\x93\x18\x61\x89\x8d\x15\x4f\x5a\x69\x7b\xbf\xb1\xe8\x21\xe7\x94\x5c\x53\x10\x8f\x62\x32\xf8\xd7\x66\xf0\x42\xf3\xaf\x2f\xf3\x4d\x8d\x3e\x83\x4a\x6a\x8f\xe9\xfb\xae\xd0\x5f\x43\x30\x4a\x6f\x3b\x72\x13\xa5\x56\x7c\x30\x33\x5d\x2f\xc8\x3e\xb2\x9c\x56\x04\xbe\xe3\xbe\x80\x7f\xfc\x20\x8b\xf5\xb6\x8d\x69\x5b\x55\x81\xb1\x04\x62\x6c\xaf\xac\x21\x5c\x53\x08\x05\xad\xa3\xb5\xa2\x3f\x8b\x4b\x59\x2c\xe6\xce\x36\xa6\xe4\x69\xdb\xa2\x29\x43\x60\x49\x0f\xf9\xd4\x78\xca\xd7\xbc\xab\x72\x58\xe1\x28\x70\x6f\x95\x16\x97\x38\x57\xa6\xab\xa1\x3d\x1e\xc6\xf2\x35\x2f\x68\x9d\x45\x83\x3b\x86\x57\x81\x52\x96\x94\x58\xa1\x83\xb8\x39\x3c\x85\x16\xbe\xc0\x10\x68\x2d\xee\xac\xd6\xf7\xb2\x58\xf0\x14\x42\x1c\xf1\x7e\x18\x56\x6c\x17\xe9\x25\xe3\x71\x28\x68\x4a\x38\x0b\x01\xe2\xa9\xe3\xbf\x35\x15\x3a\x9e\x3e\x3d\xbd\x6e\x2e\x4d\x47\x77\x7a\x28\x47\xd3\x28\x6c\x63\xa8\x0b\x3c\xbb\x5a\xbb\x57\x80\xa7\xe2\x2a\x62\x5e\x29\xff\xd1\xf9\xb1\x4a\xbe\xa3\x8d\x90\x8e\x38\x82\xde\x3d\x81\x0c\x56\xd2\xc4\x35\x42\x70\x58\x58\x57\x66\x30\xb7\x74\x31\xc8\x7a\xfc\x56\xf4\xb3\x7d\x99\x4d\xae\x47\xf9\xcd\xa9\x7d\xf9\x6d\x1b\xf1\x22\xec\xe8\xd5\x12\x42\xfc\xd1\xf5\x79\x7b\xf7\xea\x8d\x5c\xab\xc0\x7e\x04\x00\x00\xff\xff\x63\xfd\x7b\x9f\x38\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0xec, 0xa5, 0xcb, 0xb0, 0x71, 0x0, 0x4c, 0x49, 0xa2, 0xc9, 0x7f, 0x22, 0x1e, 0x72, 0x79, 0x7e, 0xfb, 0x4c, 0xfc, 0xf6, 0xab, 0x29, 0xd3, 0xef, 0x4b, 0xb4, 0x26, 0x7d, 0xd4, 0x7b, 0xfc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mysql_upsert.go.tpl":           templatesSingletonMysql_upsertGoTpl,
	"templates_test/singleton/mysql_main_test.go.tpl":   templates_testSingletonMysql_main_testGoTpl,
	"templates_test/singleton/mysql_suites_test.go.tpl": templates_testSingletonMysql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.go.tpl": &bintree{templatesSingletonMysql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.go.tpl":   &bintree{templates_testSingletonMysql_main_testGoTpl, map[string]*bintree{}},
			"mysql_suites_test.go.tpl": &bintree{templates_testSingletonMysql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
